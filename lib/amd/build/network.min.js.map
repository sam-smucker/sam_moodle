{"version":3,"file":"network.min.js","sources":["../src/network.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Poll the server to keep the session alive.\n *\n * @module     core/network\n * @copyright  2019 Damyon Wiese\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/ajax',\n    'core/config',\n    'core/notification',\n    'core/str',\n    'core/modal_save_cancel',\n    'core/modal_events',\n    'core/network_events',\n],\nfunction(\n    $,\n    Ajax,\n    Config,\n    Notification,\n    Str,\n    SaveCancelModal,\n    ModalEvents,\n    NetworkEvents,\n) {\n\n    var started = false;\n    var warningDisplayed = false;\n    var keepAliveFrequency = 0;\n    var requestTimeout = 0;\n    var keepAliveMessage = false;\n    var sessionTimeout = false;\n    // 1/10 of session timeout, max of 10 minutes.\n    var checkFrequency = Math.min((Config.sessiontimeout / 10), 600) * 1000;\n    // Check if sessiontimeoutwarning is set or double the checkFrequency.\n    var warningLimit = (Config.sessiontimeoutwarning > 0) ? (Config.sessiontimeoutwarning * 1000) : (checkFrequency * 2);\n    // First wait is minimum of remaining time or half of the session timeout.\n    var firstWait = (Config.sessiontimeoutwarning > 0) ?\n        Math.min((Config.sessiontimeout - Config.sessiontimeoutwarning) * 1000, checkFrequency * 5) : checkFrequency * 5;\n    // Modal to display when the connection is unstable.\n    var alertModal = null;\n    // URL to redirect to if network is unstable.\n    var redirectUrl = null;\n    // Number of times we have tried to touch the session after a network request failure.\n    var connectionRetries = 0;\n    /**\n     * The session time has expired - we can't extend it now.\n     * @param {Modal} modal\n     */\n    var timeoutSessionExpired = function(modal) {\n        sessionTimeout = true;\n        warningDisplayed = false;\n        closeModal(modal);\n        displaySessionExpired();\n    };\n\n    /**\n     * Close modal - this relies on modal object passed from Notification.confirm.\n     *\n     * @param {Modal} modal\n     */\n    var closeModal = function(modal) {\n        modal.destroy();\n    };\n\n    /**\n     * The session time has expired - we can't extend it now.\n     * @return {Promise}\n     */\n    var displaySessionExpired = function() {\n        // Check again if its already extended before displaying session expired popup in case multiple tabs are open.\n        var request = {\n            methodname: 'core_session_time_remaining',\n            args: { }\n        };\n\n        return Ajax.call([request], true, true, true)[0].then(function(args) {\n            if (args.timeremaining * 1000 > warningLimit) {\n                return false;\n            } else {\n                return Str.get_strings([\n                    {key: 'sessionexpired', component: 'error'},\n                    {key: 'sessionerroruser', component: 'error'},\n                    {key: 'loginagain', component: 'moodle'},\n                    {key: 'cancel', component: 'moodle'}\n                ]).then(function(strings) {\n                    Notification.confirm(\n                        strings[0], // Title.\n                        strings[1], // Message.\n                        strings[2], // Login Again.\n                        strings[3], // Cancel.\n                        function() {\n                            location.reload();\n                            return true;\n                        }\n                    );\n                    return true;\n                }).catch(Notification.exception);\n            }\n        });\n    };\n\n    /**\n     * Ping the server to keep the session alive.\n     *\n     * @return {Promise}\n     */\n    var touchSession = function() {\n        var request = {\n            methodname: 'core_session_touch',\n            args: { }\n        };\n\n        if (sessionTimeout) {\n            // We timed out before we extended the session.\n            return displaySessionExpired();\n        } else {\n            return Ajax.call([request], true, true, false, requestTimeout)[0].then(function() {\n                window.dispatchEvent(new CustomEvent(NetworkEvents.sessionTouched));\n                return true;\n            }).catch(function() {\n                window.dispatchEvent(new CustomEvent(NetworkEvents.unstableConnection));\n            });\n        }\n    };\n\n    /**\n     * Ask the server how much time is remaining in this session and\n     * show confirm/cancel notifications if the session is about to run out.\n     *\n     * @return {Promise}\n     */\n    var checkSession = function() {\n        var request = {\n            methodname: 'core_session_time_remaining',\n            args: { }\n        };\n        sessionTimeout = false;\n        return Ajax.call([request], true, true, true)[0].then(function(args) {\n            if (args.userid <= 0) {\n                return false;\n            }\n            if (args.timeremaining <= 0) {\n                return displaySessionExpired();\n            } else if (args.timeremaining * 1000 <= warningLimit && !warningDisplayed) {\n                warningDisplayed = true;\n                Str.get_strings([\n                    {key: 'norecentactivity', component: 'moodle'},\n                    {key: 'sessiontimeoutsoon', component: 'moodle'},\n                    {key: 'extendsession', component: 'moodle'},\n                    {key: 'cancel', component: 'moodle'}\n                ]).then(function(strings) {\n                     return Notification.confirm(\n                        strings[0], // Title.\n                        strings[1], // Message.\n                        strings[2], // Extend session.\n                        strings[3], // Cancel.\n                        function() {\n                            touchSession();\n                            warningDisplayed = false;\n                            // First wait is minimum of remaining time or half of the session timeout.\n                            setTimeout(checkSession, firstWait);\n                            return true;\n                        },\n                        function() {\n                            // User has cancelled notification.\n                            setTimeout(checkSession, checkFrequency);\n                        }\n                    );\n                }).then(modal => {\n                    // If we don't extend the session before the timeout - warn.\n                    setTimeout(timeoutSessionExpired, args.timeremaining * 1000, modal);\n                    return;\n                }).catch(Notification.exception);\n            } else {\n                setTimeout(checkSession, checkFrequency);\n            }\n            return true;\n        });\n        // We do not catch the fails from the above ajax call because they will fail when\n        // we are not logged in - we don't need to take any action then.\n    };\n\n    /**\n     * Start calling a function to check if the session is still alive.\n     */\n    var start = function() {\n        if (keepAliveFrequency > 0) {\n            setTimeout(touchSession, keepAliveFrequency);\n        } else {\n            // First wait is minimum of remaining time or half of the session timeout.\n            setTimeout(checkSession, firstWait);\n        }\n    };\n\n    /**\n     * Are we in an iframe and the parent page is from the same Moodle site?\n     *\n     * @return {boolean} true if we are in an iframe in a page from this Moodle site.\n     */\n    const isMoodleIframe = function() {\n        if (window.parent === window) {\n            // Not in an iframe.\n            return false;\n        }\n\n        // We are in an iframe. Is the parent from the same Moodle site?\n        let parentUrl;\n        try {\n            parentUrl = window.parent.location.href;\n        } catch (e) {\n            // If we cannot access the URL of the parent page, it must be another site.\n            return false;\n        }\n\n        return parentUrl.startsWith(M.cfg.wwwroot);\n    };\n\n    /**\n     * Don't allow more than one of these polling loops in a single page.\n     */\n    var init = function() {\n        // We only allow one concurrent instance of this checker.\n        if (started) {\n            return;\n        }\n        started = true;\n\n        if (isMoodleIframe()) {\n            window.console.log('Not starting Moodle session timeout warning in this iframe.');\n            return;\n        }\n\n        window.console.log('Starting Moodle session timeout warning.');\n\n        start();\n    };\n\n    /**\n     * Leave the page, either by redirecting or reloading.\n     */\n    var leavePage = function() {\n        if (typeof(redirectUrl) === 'string') {\n            window.location.replace(redirectUrl);\n            return;\n        }\n        window.location.reload();\n    };\n\n    /**\n     * When the network connection is unstable show the user an alert.\n     * If the unstable connection persists, force the user to exit the\n     * current page.\n     */\n    var handleUnstableConnection = function() {\n        // Show the alert modal warning the user that their\n        // connection is unstable but allow them to continue\n        // interacting with the page if they choose.\n        if (connectionRetries < 1) {\n            alertModal.show();\n            setTimeout(touchSession, keepAliveFrequency);\n            connectionRetries++;\n            return;\n        }\n\n        // If we have failed to touch the session twice in a row,\n        // show the alert modal (if not already visible) but remove\n        // any option for the user to continue on this page.\n        if (alertModal !== null) {\n            alertModal.getRoot().find('[data-action=\"cancel\"]').hide();\n            alertModal.show().then(function() {\n                alertModal.getRoot().on(ModalEvents.hidden, leavePage);\n            });\n        }\n    };\n\n    /**\n     * When the session is touched, set a timeout to touch it again\n     * and reset the number of failed connection retries.\n     */\n    var handleSessionTouched = function() {\n        if (keepAliveFrequency > 0) {\n            setTimeout(touchSession, keepAliveFrequency);\n            connectionRetries = 0;\n        }\n    };\n\n    /**\n     * Start polling with more specific values for the frequency, timeout and message.\n     *\n     * @param {number} freq How ofter to poll the server.\n     * @param {number} timeout The time to wait for each request to the server.\n     * @param {string} identifier The string identifier for the message to show if session is going to time out.\n     * @param {string} component The string component for the message to show if session is going to time out.\n     * @param {string|null} redirect A url to redirect to in case of a lost connection to the server.\n     */\n    var keepalive = async function(freq, timeout, identifier, component, redirect = null) {\n        // We only allow one concurrent instance of this checker.\n        if (started) {\n            window.console.warn('Ignoring session keep-alive. The core/network module was already initialised.');\n            return;\n        }\n        started = true;\n\n        if (isMoodleIframe()) {\n            window.console.warn('Ignoring session keep-alive in this iframe inside another Moodle page.');\n            return;\n        }\n\n        window.console.log('Starting Moodle session keep-alive.');\n\n        keepAliveFrequency = freq * 1000;\n        keepAliveMessage = await Str.get_string(identifier, component);\n        requestTimeout = timeout * 1000;\n        redirectUrl = redirect;\n\n        var strings = await Str.get_strings([\n            {key: 'unstablenetwork', component: 'mod_scorm'},\n            {key: 'leavepage', component: 'mod_scorm'},\n            {key: 'refresh', component: 'moodle'},\n        ]);\n\n        alertModal = await SaveCancelModal.create({\n            title: strings[0],\n            body: keepAliveMessage,\n            buttons: {\n                save: typeof redirectUrl === 'string' ? strings[1] : strings[2],\n            },\n            removeOnClose: false,\n            show: false\n        });\n\n        // The save button is renamed  and will redirect the user or\n        // reload the page when clicked.\n        alertModal.getRoot().on(ModalEvents.save, leavePage);\n\n        window.addEventListener(NetworkEvents.sessionTouched, handleSessionTouched);\n        window.addEventListener(NetworkEvents.unstableConnection, handleUnstableConnection);\n\n        start();\n    };\n\n    return {\n        keepalive: keepalive,\n        init: init\n    };\n});\n"],"names":["define","$","Ajax","Config","Notification","Str","SaveCancelModal","ModalEvents","NetworkEvents","started","warningDisplayed","keepAliveFrequency","requestTimeout","keepAliveMessage","sessionTimeout","checkFrequency","Math","min","sessiontimeout","warningLimit","sessiontimeoutwarning","firstWait","alertModal","redirectUrl","connectionRetries","timeoutSessionExpired","modal","closeModal","displaySessionExpired","destroy","call","methodname","args","then","timeremaining","get_strings","key","component","strings","confirm","location","reload","catch","exception","touchSession","window","dispatchEvent","CustomEvent","sessionTouched","unstableConnection","checkSession","userid","setTimeout","start","isMoodleIframe","parent","parentUrl","href","e","startsWith","M","cfg","wwwroot","leavePage","replace","handleUnstableConnection","show","getRoot","find","hide","on","hidden","handleSessionTouched","keepalive","async","freq","timeout","identifier","redirect","console","warn","log","get_string","create","title","body","buttons","save","removeOnClose","addEventListener","init"],"mappings":"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"}